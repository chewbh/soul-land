
allprojects {
    apply plugin: 'jacoco'
    jacoco {
        toolVersion = project.rootProject.project.'jacoco.version'
    }
}

subprojects {

    afterEvaluate {
        jacoco {
            applyTo junitPlatformTest
        }

        task codeCoverageReport(type: JacocoReport) {
            group 'verification'
            executionData junitPlatformTest
            sourceSets sourceSets.main
            sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
            classDirectories = files(files(project.sourceSets.main.output).collect {
                fileTree(dir: it)
                //, exclude: [
                //'**/dto'
                //]
            })
            reports {
                xml.enabled = true
                html.enabled = true
            }
        }

        task codeCoverageVerification(type: JacocoCoverageVerification) {
            group 'verification'
            executionData junitPlatformTest
            sourceSets sourceSets.main
            sourceDirectories = files(project.sourceSets.main.allSource.srcDirs)
            classDirectories = files(files(project.sourceSets.main.output).collect {
                fileTree(dir: it)
                //, exclude: [
                //]
            })
            violationRules {
                rule {
                    limit {
                        minimum = new BigDecimal("${project.rootProject.project.'jacoco.min.coverage'}")
                    }
                }
            }
        }
        junitPlatformTest.finalizedBy codeCoverageReport

        // can't really enforce this until we have a way to ignore data classes and the things they generate
        check.dependsOn codeCoverageVerification
        tasks.remove(jacocoTestReport)
        tasks.remove(jacocoTestCoverageVerification)
    }
}


afterEvaluate {
    // aggregates jacoco results from all subprojects and core project and generate a report
    task codeCoverageRootReport(type: JacocoReport) {

        // Pre-initialize these to empty collections to prevent NPE on += call below.
        additionalSourceDirs = files()
        sourceDirectories = files()
        classDirectories = files()

    def jacocoTestFiles = []
        subprojects.each { testedProject ->
            additionalSourceDirs += files(testedProject.sourceSets.main.allSource.srcDirs)
            sourceDirectories += files(testedProject.sourceSets.main.allSource.srcDirs)
            classDirectories += files(testedProject.sourceSets.main.output)

            def coverageFileLocation = "$testedProject.buildDir/jacoco/junitPlatformTest.exec"
            if (new File(coverageFileLocation).exists()) {
                jacocoTestFiles << coverageFileLocation
            }
        }

    logger.info('Aggregating next JaCoCo Coverage Files: {}', jacocoTestFiles)
    executionData = files(jacocoTestFiles)

        reports {
            xml.enabled = false
            csv.enabled = false
            html.enabled = true
        }
    }
    rootProject.tasks['sonarqube'].dependsOn codeCoverageRootReport
}
