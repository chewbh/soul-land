import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {

    repositories {
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${project.'kotlin.version'}"
        classpath("org.jetbrains.kotlin:kotlin-allopen:${project.'kotlin.version'}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${project.'spring.boot.version'}")

        classpath("com.netflix.nebula:nebula-release-plugin:${project.'nebula.release.version'}")
    }
}

apply plugin: 'nebula.release'
group 'io.boonlogic'

allprojects {}
subprojects {

    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {

        compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        compile("org.jetbrains.kotlin:kotlin-reflect")

        testCompile("org.jetbrains.kotlin:kotlin-test")
        testCompile("org.jetbrains.kotlin:kotlin-test-junit")
        testCompile('junit:junit:4.12')
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    plugins.withType(SpringBootPlugin) {
        springBoot {
            buildInfo {
                def infoProps = [
                    'name': shortName(project.name),
                    'artifact': project.name
                ]
                if(project.description != null) {
                    infoProps.put('description', project.description)
                }
                additionalProperties = infoProps
            }
        }

        dependencyManagement {
            imports {
                mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.'spring.cloud.version'}"
            }
        }
    }

    jar {
        baseName = shortName(project.name)
    }
}

task wrapper(type: Wrapper, description: "Update the Gradle wrapper") {
    gradleVersion = project."gradle.version"
}

def static final shortName(String name) {
    if(name.lastIndexOf('.') != -1 &&
            name.length() > name.lastIndexOf('.') + 2) {
        return name.substring(name.lastIndexOf('.') + 1)
    }
    return name
}

