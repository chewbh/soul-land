import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {

    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        google()
        mavenLocal()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${project.'kotlin.version'}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${project.'kotlin.version'}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${project.'spring.boot.version'}")
        classpath("org.junit.platform:junit-platform-gradle-plugin:${project.'junit.plugin.version'}")

        classpath("gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.6")
        classpath('org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2')
        classpath "gradle.plugin.com.vanniktech:gradle-code-quality-tools-plugin:0.9.0"

        classpath("com.netflix.nebula:nebula-release-plugin:${project.'nebula.release.version'}")
    }
}

apply plugin: 'nebula.release'
apply plugin: 'org.sonarqube'
//apply plugin: "com.vanniktech.code.quality.tools"

allprojects {
    group 'io.boonlogic'
}

sonarqube {
    properties {
        property "sonar.projectName", "Kotlin & Java :: Simple Project :: description"
//        property "sonar.projectKey", "org.sonarqube:java-gradle-simple"
//        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

sonarqube {
    properties {
        property 'sonar.projectName', 'Example of SonarQube Scanner for Gradle Usage'
    }
}

subprojects {

    repositories {
        jcenter()
        mavenLocal()
    }

    if (it.name != 'soul-land-web-frontend') {



        apply from: "$rootDir/gradle/codeQuality.gradle"
        apply from: "$rootDir/gradle/kotlin.gradle"

        apply from: "$rootDir/gradle/java.gradle"
        apply from: "$rootDir/gradle/test.gradle"
        apply from: "$rootDir/gradle/codeCoverage.gradle"



//        codeQualityTools {
//            failEarly = true
//            lint {
//                enabled = false
//            }
//            ktlint {
//                enabled = true
////          toolVersion = '0.14.0'
//            }
//            detekt {
//                enabled = true
//                toolVersion = '1.0.0.RC6-3'
//                config = "$rootDir/default-detekt-config.yml"
//            }
//            cpd {
//                enabled = false
//            }
//            errorProne {
//                enabled = true
//                toolVersion = '2.1.3'
//            }
//        }

        plugins.withType(SpringBootPlugin) {
            springBoot {
                buildInfo {
                    def infoProps = [
                        'name': shortName(project.name),
                        'artifact': project.name
                    ]
                    if(project.description != null) {
                        infoProps.put('description', project.description)
                    }
                    additionalProperties = infoProps
                }
            }

            dependencyManagement {
                imports {
                    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${project.'spring.cloud.version'}"
                }
            }
        }

        jar {
            baseName = shortName(project.name)
        }

        dependencies {
//        compile("com.fasterxml.jackson.module:jackson-module-kotlin")
        }
    }
}

task wrapper(type: Wrapper, description: "Update the Gradle wrapper") {
    gradleVersion = project."gradle.version"
}

def static final shortName(String name) {
    if(name.lastIndexOf('.') != -1 &&
            name.length() > name.lastIndexOf('.') + 2) {
        return name.substring(name.lastIndexOf('.') + 1)
    }
    return name
}

defaultTasks ":soul-land-web-frontend:build", "build"
