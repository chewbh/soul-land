
description 'Service Registry & Discovery Server based on Netflix Eureka'

apply plugin: 'org.springframework.boot'
apply plugin: 'nu.studer.jooq'

dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.boot:spring-boot-starter-undertow')
    compile('org.springframework.boot:spring-boot-starter-actuator')

    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('org.jooq:jooq:3.9.1')

//    compile('org.jooq:jooq-meta:3.9.1')
    runtime('org.postgresql:postgresql:42.2.1')
    jooqRuntime('postgresql:postgresql:9.1-901.jdbc4')

}

configurations {
    compile.exclude module: "spring-boot-starter-tomcat"
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
//        classpath('org.jooq:jooq-codegen:3.9.1')
//        classpath('org.jooq:jooq-meta:3.9.1')
//        classpath('org.postgresql:postgresql:42.2.1')
        classpath 'nu.studer:gradle-jooq-plugin:2.0.9'
    }
}

jooq {
    version = '3.9.1' // the default (can be omitted)
    mpp(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:32769/gerrit'
            user = 'gerrit'
            password = 'secret'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'

                includes = 'accounts'
                includeExcludeColumns = true

                includeTables = true
                includeRoutines = false
                includePackages = false
                includeUDTs = false
                includeSequences = false
                includePrimaryKeys = false
                includeUniqueKeys = false
                includeForeignKeys = false

                dateAsTimestamp = true

//                customTypes {
//                    customType {
//                        name = 'com.fasterxml.jackson.databind.JsonNode'
//                        converter = 'csmart.api.config.db.PostgresJSONJacksonJsonNodeBinding'
//                    }
//                }
//                forcedTypes {
//                    forcedType {
//                        name = 'com.fasterxml.jackson.databind.JsonNode'
//                        expression = 'public\\.users\\.address'
//                    }
//                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'io.boonlogic.soul.land.microservices.hello.db'
                directory = 'src/main/java'
            }
        }
    }
}

//// Use your favourite XML builder to construct the code generation configuration file
//// ----------------------------------------------------------------------------------
//def writer = new StringWriter()
//def xml = new groovy.xml.MarkupBuilder(writer)
//        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.9.0.xsd') {
//    jdbc() {
//        driver('org.postgresql.Driver')
//        url('jdbc:postgresql://localhost:32769/gerrit')
//        user('gerrit')
//        password('secret')
//    }
//    generator() {
//        database() {
//            name('org.jooq.util.postgres.PostgresDatabase')
//            includes('pg_catalog.ts_*')
//        }
//
//        // Watch out for this caveat when using MarkupBuilder with "reserved names"
//        // - https://github.com/jOOQ/jOOQ/issues/4797
//        // - http://stackoverflow.com/a/11389034/521799
//        // - https://groups.google.com/forum/#!topic/jooq-user/wi4S9rRxk4A
//        generate([:]) {
//            relations true
//            immutablePojos true
////            daos true
//        }
//        target() {
//            packageName('io.boonlogic.soul.land.microservices.hello.db')
//            directory("/src/main/java")
//        }
//    }
//}
//
//task generateJooq() {
//    doLast() {
//        // Run the code generator
//        // ----------------------
//        org.jooq.util.GenerationTool.generate(
//                javax.xml.bind.JAXB.unmarshal(
//                        new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
//        )
//    }
//}